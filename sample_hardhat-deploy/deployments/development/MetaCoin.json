{
  "address": "0x54bD5669449f37f683Dd5B5a7Dc2b5a7a6A6A629",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getBalanceInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendCoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "sufficient",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc16b22a7a95de81b144840e3c65cd7076dd0ecb00affe45745058065a3caaaf",
  "receipt": {
    "to": null,
    "from": "0x747131D06401BD8ab4f5b4bdE524aE6d9C5e2d9A",
    "contractAddress": "0x54bD5669449f37f683Dd5B5a7Dc2b5a7a6A6A629",
    "transactionIndex": 0,
    "gasUsed": "416594",
    "logsBloom": "0x
    "blockHash": "0x2f0433d649ec646f3face5000f815d512b14aa6b6a10be25479fb1a661ca3b10",
    "transactionHash": "0xdc16b22a7a95de81b144840e3c65cd7076dd0ecb00affe45745058065a3caaaf",
    "logs": [],
    "blockNumber": 16264,
    "cumulativeGasUsed": "416594",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ed72e182c6a39157dfdf4b394355f59a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalanceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"sufficient\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A simple coin-like contract example. This contract is not standards compliant and is meant for educational purposes. (devdoc)\",\"events\":{\"Transfer(address,address,uint256)\":{\"details\":\"Event triggered when coins are transferred. (devdoc)\",\"params\":{\"_from\":\"The address from which the coins are sent.\",\"_to\":\"The address to which the coins are sent.\",\"_value\":\"The amount of coins transferred.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor that gives the contract creator an initial balance of 10000 MetaCoins. (devdoc)\"},\"getBalance(address)\":{\"details\":\"Returns the balance of `addr`. (devdoc)\",\"params\":{\"addr\":\"The address whose balance is to be checked.\"},\"returns\":{\"_0\":\"The balance in MetaCoins.\"}},\"getBalanceInEth(address)\":{\"details\":\"Converts the balance of `addr` from MetaCoins to Ether. (devdoc)\",\"params\":{\"addr\":\"The address whose balance is to be checked.\"},\"returns\":{\"_0\":\"The balance in Ether.\"}},\"sendCoin(address,uint256)\":{\"details\":\"Transfers coins from sender's account to receiver's account if the sender has sufficient balance. (devdoc)\",\"params\":{\"amount\":\"The amount of MetaCoins to send.\",\"receiver\":\"The address of the receiver.\"},\"returns\":{\"sufficient\":\"Returns true if the sender has enough balance, false otherwise.\"}}},\"title\":\"MetaCoin\",\"version\":1},\"userdoc\":{\"events\":{\"Transfer(address,address,uint256)\":{\"notice\":\"Event triggered when coins are transferred. (userdoc)\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor that gives the contract creator an initial balance of 10000 MetaCoins. (userdoc)\"},\"getBalance(address)\":{\"notice\":\"Get the balance of `addr` in MetaCoins. (userdoc)\"},\"getBalanceInEth(address)\":{\"notice\":\"Get the balance of `addr` in Ether. (userdoc)\"},\"sendCoin(address,uint256)\":{\"notice\":\"Send `amount` of MetaCoins to `receiver`. (userdoc)\"}},\"notice\":\"A simple coin-like contract example. This contract is not standards compliant and is meant for educational purposes. (userdoc)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetaCoin.sol\":\"MetaCoin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ConvertLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.25;\\n\\nlibrary ConvertLib{\\n\\tfunction convert(uint amount,uint conversionRate) public pure returns (uint convertedAmount)\\n\\t{\\n\\t\\treturn amount * conversionRate;\\n\\t}\\n}\\n\",\"keccak256\":\"0xe344d3c3e14917e65d03a5d54fbb4adb59134da9c29b9b9ec1f45428c4549f33\",\"license\":\"MIT\"},\"contracts/MetaCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.25;\\n\\nimport \\\"./ConvertLib.sol\\\";\\n\\n// This is just a simple example of a coin-like contract.\\n// It is not standards compatible and cannot be expected to talk to other\\n// coin/token contracts. If you want to create a standards-compliant\\n// token, see: https://github.com/ConsenSys/Tokens. Cheers!\\n\\n/**\\n * @title MetaCoin\\n * @dev A simple coin-like contract example. This contract is not standards compliant and is meant for educational purposes. (devdoc)\\n * @notice A simple coin-like contract example. This contract is not standards compliant and is meant for educational purposes. (userdoc)\\n */\\ncontract MetaCoin {\\n    mapping(address => uint) balances;\\n\\n    /**\\n     * @dev Event triggered when coins are transferred. (devdoc)\\n     * @notice Event triggered when coins are transferred. (userdoc)\\n     * @param _from The address from which the coins are sent.\\n     * @param _to The address to which the coins are sent.\\n     * @param _value The amount of coins transferred.\\n     */\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n\\n    /**\\n     * @dev Constructor that gives the contract creator an initial balance of 10000 MetaCoins. (devdoc)\\n     * @notice Constructor that gives the contract creator an initial balance of 10000 MetaCoins. (userdoc)\\n     */\\n    constructor() {\\n        balances[tx.origin] = 10000;\\n    }\\n\\n    /**\\n     * @dev Transfers coins from sender's account to receiver's account if the sender has sufficient balance. (devdoc)\\n     * @notice Send `amount` of MetaCoins to `receiver`. (userdoc)\\n     * @param receiver The address of the receiver.\\n     * @param amount The amount of MetaCoins to send.\\n     * @return sufficient Returns true if the sender has enough balance, false otherwise.\\n     */\\n    function sendCoin(\\n        address receiver,\\n        uint amount\\n    ) public returns (bool sufficient) {\\n        if (balances[msg.sender] < amount) return false;\\n        balances[msg.sender] -= amount;\\n        balances[receiver] += amount;\\n        emit Transfer(msg.sender, receiver, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Converts the balance of `addr` from MetaCoins to Ether. (devdoc)\\n     * @notice Get the balance of `addr` in Ether. (userdoc)\\n     * @param addr The address whose balance is to be checked.\\n     * @return The balance in Ether.\\n     */\\n    function getBalanceInEth(address addr) public view returns (uint) {\\n        return ConvertLib.convert(getBalance(addr), 2);\\n    }\\n\\n    /**\\n     * @dev Returns the balance of `addr`. (devdoc)\\n     * @notice Get the balance of `addr` in MetaCoins. (userdoc)\\n     * @param addr The address whose balance is to be checked.\\n     * @return The balance in MetaCoins.\\n     */\\n    function getBalance(address addr) public view returns (uint) {\\n        return balances[addr];\\n    }\\n}\\n\",\"keccak256\":\"0x39875eee7bd5a28e20f0e7c8b226d065d2fcaf2cb04e7c40594266fd8e2586b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506127106000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610629806100656000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637bd703e81461004657806390b98a1114610076578063f8b2cb4f146100a6575b600080fd5b610060600480360381019061005b9190610378565b6100d6565b60405161006d91906103be565b60405180910390f35b610090600480360381019061008b9190610405565b610162565b60405161009d9190610460565b60405180910390f35b6100c060048036038101906100bb9190610378565b6102cd565b6040516100cd91906103be565b60405180910390f35b600073651055b341B58Adb68e029655BECE74D5c60979f6396e4ee3d6100fb846102cd565b60026040518363ffffffff1660e01b815260040161011a9291906104cf565b602060405180830381865af4158015610137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015b919061050d565b9050919050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156101b357600090506102c7565b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102019190610569565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610256919061059d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516102ba91906103be565b60405180910390a3600190505b92915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103458261031a565b9050919050565b6103558161033a565b811461036057600080fd5b50565b6000813590506103728161034c565b92915050565b60006020828403121561038e5761038d610315565b5b600061039c84828501610363565b91505092915050565b6000819050919050565b6103b8816103a5565b82525050565b60006020820190506103d360008301846103af565b92915050565b6103e2816103a5565b81146103ed57600080fd5b50565b6000813590506103ff816103d9565b92915050565b6000806040838503121561041c5761041b610315565b5b600061042a85828601610363565b925050602061043b858286016103f0565b9150509250929050565b60008115159050919050565b61045a81610445565b82525050565b60006020820190506104756000830184610451565b92915050565b610484816103a5565b82525050565b6000819050919050565b6000819050919050565b60006104b96104b46104af8461048a565b610494565b6103a5565b9050919050565b6104c98161049e565b82525050565b60006040820190506104e4600083018561047b565b6104f160208301846104c0565b9392505050565b600081519050610507816103d9565b92915050565b60006020828403121561052357610522610315565b5b6000610531848285016104f8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610574826103a5565b915061057f836103a5565b9250828210156105925761059161053a565b5b828203905092915050565b60006105a8826103a5565b91506105b3836103a5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156105e8576105e761053a565b5b82820190509291505056fea2646970667358221220eed21cdf1fa0f7f2fd879ec6ae3710c2711fbd339cb737605f962cd4feeae6a664736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80637bd703e81461004657806390b98a1114610076578063f8b2cb4f146100a6575b600080fd5b610060600480360381019061005b9190610378565b6100d6565b60405161006d91906103be565b60405180910390f35b610090600480360381019061008b9190610405565b610162565b60405161009d9190610460565b60405180910390f35b6100c060048036038101906100bb9190610378565b6102cd565b6040516100cd91906103be565b60405180910390f35b600073__$790e28c6efc44c91dd5ccaef91022121eb$__6396e4ee3d6100fb846102cd565b60026040518363ffffffff1660e01b815260040161011a9291906104cf565b602060405180830381865af4158015610137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015b919061050d565b9050919050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156101b357600090506102c7565b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102019190610569565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610256919061059d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516102ba91906103be565b60405180910390a3600190505b92915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103458261031a565b9050919050565b6103558161033a565b811461036057600080fd5b50565b6000813590506103728161034c565b92915050565b60006020828403121561038e5761038d610315565b5b600061039c84828501610363565b91505092915050565b6000819050919050565b6103b8816103a5565b82525050565b60006020820190506103d360008301846103af565b92915050565b6103e2816103a5565b81146103ed57600080fd5b50565b6000813590506103ff816103d9565b92915050565b6000806040838503121561041c5761041b610315565b5b600061042a85828601610363565b925050602061043b858286016103f0565b9150509250929050565b60008115159050919050565b61045a81610445565b82525050565b60006020820190506104756000830184610451565b92915050565b610484816103a5565b82525050565b6000819050919050565b6000819050919050565b60006104b96104b46104af8461048a565b610494565b6103a5565b9050919050565b6104c98161049e565b82525050565b60006040820190506104e4600083018561047b565b6104f160208301846104c0565b9392505050565b600081519050610507816103d9565b92915050565b60006020828403121561052357610522610315565b5b6000610531848285016104f8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610574826103a5565b915061057f836103a5565b9250828210156105925761059161053a565b5b828203905092915050565b60006105a8826103a5565b91506105b3836103a5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156105e8576105e761053a565b5b82820190509291505056fea2646970667358221220eed21cdf1fa0f7f2fd879ec6ae3710c2711fbd339cb737605f962cd4feeae6a664736f6c634300080d0033",
  "libraries": {
    "ConvertLib": "0x651055b341B58Adb68e029655BECE74D5c60979f"
  },
  "devdoc": {
    "details": "A simple coin-like contract example. This contract is not standards compliant and is meant for educational purposes. (devdoc)",
    "events": {
      "Transfer(address,address,uint256)": {
        "details": "Event triggered when coins are transferred. (devdoc)",
        "params": {
          "_from": "The address from which the coins are sent.",
          "_to": "The address to which the coins are sent.",
          "_value": "The amount of coins transferred."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor that gives the contract creator an initial balance of 10000 MetaCoins. (devdoc)"
      },
      "getBalance(address)": {
        "details": "Returns the balance of `addr`. (devdoc)",
        "params": {
          "addr": "The address whose balance is to be checked."
        },
        "returns": {
          "_0": "The balance in MetaCoins."
        }
      },
      "getBalanceInEth(address)": {
        "details": "Converts the balance of `addr` from MetaCoins to Ether. (devdoc)",
        "params": {
          "addr": "The address whose balance is to be checked."
        },
        "returns": {
          "_0": "The balance in Ether."
        }
      },
      "sendCoin(address,uint256)": {
        "details": "Transfers coins from sender's account to receiver's account if the sender has sufficient balance. (devdoc)",
        "params": {
          "amount": "The amount of MetaCoins to send.",
          "receiver": "The address of the receiver."
        },
        "returns": {
          "sufficient": "Returns true if the sender has enough balance, false otherwise."
        }
      }
    },
    "title": "MetaCoin",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Transfer(address,address,uint256)": {
        "notice": "Event triggered when coins are transferred. (userdoc)"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor that gives the contract creator an initial balance of 10000 MetaCoins. (userdoc)"
      },
      "getBalance(address)": {
        "notice": "Get the balance of `addr` in MetaCoins. (userdoc)"
      },
      "getBalanceInEth(address)": {
        "notice": "Get the balance of `addr` in Ether. (userdoc)"
      },
      "sendCoin(address,uint256)": {
        "notice": "Send `amount` of MetaCoins to `receiver`. (userdoc)"
      }
    },
    "notice": "A simple coin-like contract example. This contract is not standards compliant and is meant for educational purposes. (userdoc)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 572,
        "contract": "contracts/MetaCoin.sol:MetaCoin",
        "label": "balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
